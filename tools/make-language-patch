#!/bin/bash

# Created by argbash-init v2.7.1
# ARG_OPTIONAL_SINGLE([languages],[l],[Space-separated string containing languages that should be added by the patch. If not supplied, no filtering will take place.])
# ARG_OPTIONAL_SINGLE([tmproot],[],[The root of the script's temp directory hierarchy.],[/tmp/oaa_po_$$])
# ARG_OPTIONAL_SINGLE([local-content],[l],[Don't pull translations from Zanata, but use this 'po' directory.])
# ARG_POSITIONAL_SINGLE([tarball],[Path to the tarball with upstream release that contains some translations already.])
# ARG_POSITIONAL_SINGLE([filename],[Where to save the patch.],[-])
# ARG_DEFAULTS_POS([])
# DEFINE_SCRIPT_DIR([])
# ARG_HELP([Get translations from Zanata / local 'po' directory, and craft a patch against translations in the release tarball.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='llh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_tarball=
_arg_filename="-"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_languages=
_arg_tmproot="/tmp/oaa_po_$$"
_arg_local_content=


print_help()
{
	printf '%s\n' "Get translations from Zanata / local 'po' directory, and craft a patch against translations in the release tarball."
	printf 'Usage: %s [-l|--languages <arg>] [--tmproot <arg>] [-l|--local-content <arg>] [-h|--help] <tarball> [<filename>]\n' "$0"
	printf '\t%s\n' "<tarball>: Path to the tarball with upstream release that contains some translations already."
	printf '\t%s\n' "<filename>: Where to save the patch. (default: '-')"
	printf '\t%s\n' "-l, --languages: Space-separated string containing languages that should be added by the patch. If not supplied, no filtering will take place. (no default)"
	printf '\t%s\n' "--tmproot: The root of the script's temp directory hierarchy. (default: '/tmp/oaa_po_$$')"
	printf '\t%s\n' "-l, --local-content: Don't pull translations from Zanata, but use this 'po' directory. (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-l|--languages)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_languages="$2"
				shift
				;;
			--languages=*)
				_arg_languages="${_key##--languages=}"
				;;
			-l*)
				_arg_languages="${_key##-l}"
				;;
			--tmproot)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tmproot="$2"
				shift
				;;
			--tmproot=*)
				_arg_tmproot="${_key##--tmproot=}"
				;;
			-l|--local-content)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_local_content="$2"
				shift
				;;
			--local-content=*)
				_arg_local_content="${_key##--local-content=}"
				;;
			-l*)
				_arg_local_content="${_key##-l}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'tarball'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_tarball _arg_filename "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

oaa_root="$(cd "$script_dir/.." && pwd)"


# $1: Where to put those translations
pull_translations_locally () {
	(cd "$oaa_root" && make po-pull ZANATA_PULL_ARGS="--transdir $1")
}


# $1: Location of local translations
# $2: Where to put those translations
copy_translations_from_directory() {
	cp "$1/"*.po "$2/"
}


# $1: OAA tarball
# $2: Where to put translations (i.e. contents of the RPM's 'po' folder)
extract_translations_from_tarball () {
	tarball_stem="$(printf "%s" "$1" | sed -e 's|.*\(oscap-anaconda-addon[^/]*\)\.tar\.gz|\1|')"
	tar --strip-components=2 -C "$2" -xf "$1" "$tarball_stem/po"
}


# $1: Directory with translation files.
# $2: Space-separated list of languages that we support.
filter_translations() {
	local regex="$(languages_to_ext_regex "$2")"
	for file in "$1"/*.po; do
		printf "%s" "$file" | grep -Eq "$regex" || rm "$file"
	done
}


languages_to_ext_regex() {
	local regex=""
	for lang in $1; do
		regex="$regex$(printf "%s" "$lang" | tr - _)|"
	done
	printf "%s" "(${regex%|})\\.po$"
}

tmpdir="$_arg_tmproot"
rm -rf "$tmpdir"

srcdir="$tmpdir/a/po"
mkdir -p "$srcdir"

destdir="$tmpdir/b/po"
mkdir -p "$destdir"

if test -n "$_arg_local_content"; then
	copy_translations_from_directory "$_arg_local_content" "$destdir"
else
	pull_translations_locally "$tmpdir/a/po"
fi

cp "$oaa_root/po/Makefile" "$oaa_root/po/oscap-anaconda-addon.pot" "$destdir"
extract_translations_from_tarball "$_arg_tarball" "$srcdir"

rm -f "$srcdir/*.mo"
rm -f "$destdir/*.mo"

test -n "$_arg_languages" && filter_translations "$destdir" "$_arg_languages"

if test "$_arg_filename" = -; then
	(cd "$tmpdir" && diff -U3 -N -r a b)
else
	(cd "$tmpdir" && diff -U3 -N -r a b) > "$_arg_filename"
fi

rm -rf "$tmpdir"

# ] <-- needed because of Argbash
